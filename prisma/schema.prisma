// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

// https://www.prisma.io/docs/getting-started/quickstart
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model user {
  id                   Int                 @id @default(autoincrement())
  email                String              @unique
  emailVerified        DateTime?
  sessions             Session[]
  accounts             Account[]
  profile              Profile[]
  resetTokens          ResetTokens[]
  verifyEmailTokens    VerifyEmailTokens[]
  listUsers            ListUsers[]
  lists                List[]
  notificationForUser  Notification[]      @relation("notification_for_user")
  notificationFromUser Notification[]      @relation("notification_from_user")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user user @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("session")
}

model MagicLinks {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  token          String   @unique
  tokenExpiresAt DateTime

  @@map("magic_links")
}

model ResetTokens {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  token          String   @unique
  tokenExpiresAt DateTime

  user user @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("reset_tokens")
}

model VerifyEmailTokens {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  token          String   @unique
  tokenExpiresAt DateTime

  user user @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("verify_email_tokens")
}

model Account {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  accountType String

  githubId String? @unique
  googleId String? @unique
  password String?
  salt     String?

  user user @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("accounts")
}

model Profile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  displayName String?
  imageId     String?
  image       String?
  bio         String?

  user user @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("profile")
}

model List {
  id          Int         @id @default(autoincrement())
  name        String
  description String      @default("")
  items       Item[]
  creatorId   Int
  createdBy   user        @relation(references: [id], fields: [creatorId], onDelete: Cascade)
  listUsers   ListUsers[]
  userId      Int?
}

model ListUsers {
  id     Int @id @default(autoincrement())
  listId Int
  userId Int

  list List @relation(fields: [listId], references: [id])
  user user @relation(fields: [userId], references: [id])

  @@index([listId, userId])
}

model Item {
  id         Int     @id @default(autoincrement())
  listId     Int
  text       String
  isComplete Boolean @default(false)
  list       List    @relation(references: [id], fields: [listId], onDelete: Cascade)
}

model NotificationType {
  id   Int    @id @default(autoincrement())
  type String @unique

  notification Notification[]
}

model Notification {
  id         Int     @id @default(autoincrement())
  message    String
  typeId     Int
  forUserId  Int
  fromUserId Int
  resourceId Int
  isActive   Boolean @default(true)

  type     NotificationType @relation(references: [id], fields: [typeId])
  forUser  user             @relation("notification_for_user", references: [id], fields: [forUserId])
  fromUser user             @relation("notification_from_user", references: [id], fields: [fromUserId])
}
