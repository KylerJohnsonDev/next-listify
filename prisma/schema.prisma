// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// https://www.prisma.io/docs/getting-started/quickstart
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id       BigInt    @id @default(autoincrement())
  email    String    @unique
  emailVerified DateTime? 
  sessions session[]
  accounts accounts[]
  profile profiles[]
  resetTokens resetTokens[]
  verifyEmailTokens verifyEmailTokens[]

  @@map("user")
}

model session {
  id        String   @id
  userId    BigInt @unique 
  expiresAt DateTime

  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model magicLinks {
  id        BigInt   @id @default(autoincrement())
  email   String @unique
  token     String @unique
  tokenExpiresAt DateTime

  @@map("magic_links")
}

model resetTokens {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt @unique
  token     String @unique
  tokenExpiresAt DateTime

  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@map("reset_tokens")
}

model verifyEmailTokens {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt @unique
  token     String @unique
  tokenExpiresAt DateTime

  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@map("verify_email_tokens")
}

model accounts {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt @unique 
  accountType String

  githubId String? @unique
  googleId String? @unique
  password String?
  salt     String?

  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model profiles {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt @unique
  displayName String?
  imageId String?
  image String?
  bio       String?

  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@map("profile")
}


